{"version":3,"sources":["Components/Header.js","Components/Formulario.js","helpers/helpers.js","Components/Mensaje.js","Components/Resultado.js","Components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","Formulario","props","cantidad","guardarCantidad","plazo","guardarPlazo","guardarTotal","guardarCargando","useState","error","guardarError","onSubmit","e","preventDefault","setTimeout","total","totalCantidad","totalPlazo","calcularTotal","className","type","placeholder","onChange","parseInt","target","value","Mensaje","Resultado","toFixed","Spinner","App","componente","cargando","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.74c49d58.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\n\r\nconst Header = ({ titulo }) => (\r\n    <Fragment>\r\n        <h1>{titulo}</h1>\r\n    </Fragment>\r\n);\r\n\r\n\r\nexport default Header;\r\n\r\n// con la herramienta de react del navegador puede verse que props se utilizo en cada componente\r\n\r\n// con arrow function no tenemos acceso al RETURN que nos permite escribir codigo JS arriba, por lo que solo usar cuando sea necesario.\r\n","import React, { useState, Fragment } from 'react';\r\nimport { calcularTotal } from '../helpers/helpers';\r\n\r\nconst Formulario = (props) => {\r\n\r\n    const { cantidad, guardarCantidad, plazo, guardarPlazo, guardarTotal, guardarCargando } = props;\r\n\r\n    //Definir state\r\n    const [error, guardarError] = useState(false); // useState(flase) = validator\r\n\r\n\r\n    //cuando el usuario da sumbit\r\n\r\n    const calcularPrestamo = e => {\r\n        e.preventDefault();\r\n\r\n\r\n        //validar\r\n        if (cantidad === 0 || plazo === '') {\r\n            guardarError(true) //cambia el statede false a true (visible en componentes -> form -> hook)\r\n            return;\r\n        }\r\n        //eliminar el error previo\r\n        guardarError(false);\r\n\r\n        //Habilitar el spinner\r\n        guardarCargando(true);\r\n        setTimeout(() => {\r\n            //realizar la cotizacion\r\n            const total = calcularTotal(cantidad, plazo);\r\n\r\n\r\n            //Una vez calculado, guardarTotal\r\n            guardarTotal(total);\r\n\r\n            //Deshabilitar el spinner\r\n            guardarCargando(false);\r\n        }, 3000);\r\n\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={calcularPrestamo}>\r\n                <div className=\"row\">\r\n                    <div>\r\n                        <label>Cantidad Prestamo</label>\r\n                        <input\r\n                            className=\"u-full-width\"\r\n                            type=\"number\"\r\n                            placeholder=\"Ejemplo: 3000\"\r\n                            onChange={e =>\r\n                                guardarCantidad(parseInt(e.target.value))\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Plazo para Pagar</label>\r\n                        <select\r\n                            className=\"u-full-width\"\r\n                            onChange={e =>\r\n                                guardarPlazo(parseInt(e.target.value))\r\n                            }\r\n\r\n                        >\r\n                            <option value=\"\">Seleccionar</option>\r\n                            <option value=\"3\">3 meses</option>\r\n                            <option value=\"6\">6 meses</option>\r\n                            <option value=\"12\">12 meses</option>\r\n                            <option value=\"24\">24 meses</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type=\"submit\"\r\n                            value=\"Calcular\"\r\n                            className=\"button-primary u-full-width\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            {(error) ? <p className=\"error\">Todos los campos son obligatorios.</p> : null}\r\n        </Fragment>\r\n        //if error = true {p classname=\"error\" /p else null}\r\n    );\r\n}\r\n\r\nexport default Formulario;","export function calcularTotal(cantidad, plazo) {\r\n    //Cantidades\r\n    //0 - 1000 = 25%\r\n    //1001 - 5000 = 20%\r\n    //5001 - 1000 = 15%\r\n    //+1000 = 10%\r\n\r\n    let totalCantidad;\r\n    if (cantidad <= 1000) {\r\n        totalCantidad = cantidad * .25;\r\n    } else if (cantidad > 1000 && cantidad <= 5000) {\r\n        totalCantidad = cantidad * .20;\r\n    } else if (cantidad > 5000 && cantidad <= 10000) {\r\n        totalCantidad = cantidad * .15;\r\n    } else {\r\n        totalCantidad = cantidad * .10;\r\n    }\r\n\r\n    // Calcular el plazo}\r\n    // 3 = 5%\r\n    // 6 = 10%\r\n    //12 = 15%\r\n    //24 = 20%\r\n\r\n    let totalPlazo = 0;\r\n\r\n    switch (plazo) {\r\n        case 3:\r\n            totalPlazo = cantidad * .05;\r\n            break;\r\n        case 6:\r\n            totalPlazo = cantidad * .10;\r\n            break;\r\n        case 12:\r\n            totalPlazo = cantidad * .15;\r\n            break;\r\n        case 24:\r\n            totalPlazo = cantidad * .20;\r\n            break;\r\n        default: break;\r\n    }\r\n    return totalPlazo + totalCantidad + cantidad;\r\n}\r\n","import React from 'react';\r\n\r\nconst Mensaje = () => (\r\n    <p>Agrega una cantidad y plazo a pagar para cotizar </p>\r\n);\r\n\r\n\r\nexport default Mensaje;","import React from 'react';\r\n\r\n\r\nconst Resultado = ({ total, plazo, cantidad }) => (\r\n    <div className=\"u-full-width resultado\">\r\n        <h2>Resumen</h2>\r\n        <p>La cantidad solicitada es: $ {cantidad} </p>\r\n        <p>A pagar en {plazo} Meses </p>\r\n        <p>Su pago mensual es de : $ {(total / plazo).toFixed(2)} </p>\r\n        <p>Total a pagar: $ {(total).toFixed(2)} </p>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n);\r\n\r\nexport default Resultado;\r\n\r\n\r\n//.toFixed(2) es para devolver solo 2 digitos de centavos en caso de tener un numero como pi","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"dot1\"></div>\r\n            <div className=\"dot2\"></div>\r\n        </div>)\r\n        ;\r\n}\r\n\r\nexport default Spinner;","import React, { Fragment, useState } from 'react';\nimport Header from './Components/Header';\nimport Formulario from './Components/Formulario';\nimport Mensaje from './Components/Mensaje';\nimport Resultado from './Components/Resultado';\nimport Spinner from './Components/Spinner';\n\n\n\n\nfunction App() {\n\n  //definir el state\n  const [cantidad, guardarCantidad] = useState(0);\n  const [plazo, guardarPlazo] = useState('');\n  const [total, guardarTotal] = useState(0);\n  const [cargando, guardarCargando] = useState(false);\n  //array destructuring\n  // 1ero variable que contiene valor\n  // function que interactua y guarda el state\n\n  //Carga condicional de Componente\n  let componente;\n\n  if (cargando) {\n    componente = <Spinner />;\n  }\n  else if (total === 0) {\n    componente = <Mensaje />\n  } else {\n    componente = <Resultado\n\n      total={total}\n      plazo={plazo}\n      cantidad={cantidad}\n    />\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////\n  return (\n    <Fragment>\n\n      <Header\n        titulo=\"Cotizador de Prestamos\"\n      />\n\n      <div className=\"container\">\n        <Formulario\n          cantidad={cantidad}\n          guardarCantidad={guardarCantidad}\n          plazo={plazo}\n          guardarPlazo={guardarPlazo}\n          guardarTotal={guardarTotal}\n          guardarCargando={guardarCargando}\n        />\n        <div className=\"mensajes\">\n          {componente}\n        </div>\n\n\n      </div>\n\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}